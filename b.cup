/**********************************************************************
 Java CUP specification for a parser for b programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                RECEIVE;
terminal                PRINT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		        REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;
non terminal FnDeclNode       fnDecl;
non terminal FnBodyNode       fnBody;
non terminal FormalsListNode  formals;
non terminal FormalDeclNode   formalDecl;
non terminal LinkedList       formalsList;
non terminal LinkedList       varDeclList;
non terminal LinkedList       stmtList;
non terminal LinkedList       varDeclList;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          loc;
 
 
/* NOTE: Add precedence and associativity declarations here */

precedence right ASSIGN;

precedence left OR;

precedence left AND;

precedence nonassoc LESS, LESSEQ, GREATER, GREATEREQ, EQUALS, NOTEQUALS;

precedence left PLUS, MINUS;

precedence left TIMES, DIVIDE;

precedence left NOT;

precedence left DOT; //Not sure where to put this in the order of precedences

//highest precedence is at the bottom  (so DOT and NOT have highest)

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: 
                    RESULT = v;
                :}
                | structDecl:sd
                {:
                    RESULT = sd;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:i1 id:i2 SEMICOLON
                {:
                    //TODO make sure that this is right
                    RESULT = new VarDeclNode(new StructNode(id1), id2, 0);
                :}
                ;

type            ::= INT:i
                {: 
                    RESULT = new IntNode();
                :}
                | BOOL:b
                {:
                    RESULT = new BoolNode();
                :}
                | VOID:v
                {:
                    RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
                {:
                    RESULT = new StructDeclNode(i, new DeclListNode(sb));
                :}
                ;

structBody      ::= structBody:sb varDecl:v
                {:  sb.addLast(v);
                    RESULT = sb;
                :}
                | varDecl:vd
                {:  LinkedList<VarDeclNode> vl = new LinkedList<VarDeclNode>();
                    vl.addLast(vd);
                    RESULT = vl;
                :}
                ;

formals         ::= LPAREN RPAREN
                {:
                    RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LPAREN formalsList:fl RPAREN
                {:
                    RESULT = new FormalsListNode(fl);
                :}
                ;

formalsList     ::= formalsList:fl COMMA formalDecl:fd
                {:  //TODO should this be addLast or addFirst
                    fl.addLast(fd);
                    RESULT = fl;
                :}
                | formalDecl:fd
                {:
                    LinkedList<FormalDeclNode> fdl = new LinkedList<FormalDeclNode>();
                    fdl.addLast(fd);
                    RESULT = fdl;
                :}
                ;

formalDecl      ::= type:t id:i
                {:
                    RESULT = new FormalDeclNode(t, i);
                :}
                ;

fnDecl          ::= type:t id:i formals:fs fnBody:fb
                {:
                    RESULT = new FnDeclNode(t, i, fs, fb);
                :}
                ;

fnBody          ::= LCURLY varDeclList:vdl stmtList:sl RCURLY
                {:
                    RESULT = new FnBodyNode(new DeclListNode(vdl), new StmtListNode(sl));
                :}
                ;

varDeclList     ::= varDeclList:vdl varDecl:v
                {:
                    vdl.addLast(v);
                    RESULT = vdl;
                :}
                | /* epsilon */
                {:
                    RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {:
                    sl.addLast(s);
                    RESULT = sl;
                :}
                | /* epsilon */
                {:
                    RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
                {:
                    RESULT = new AssignStmtNode(a);
                :}
                | PLUSPLUS loc:l SEMICOLON
                {:
                    RESULT = new PreIncStmtNode(l);
                :}
                | MINUSMINUS loc:l SEMICOLON;
                {:
                    RESULT = new PreDecStmtNode(l);
                :}
                | RECIEVE READ loc:l SEMICOLON
                {:
                    RESULT = new ReceiveStmtNode(l);
                :}
                | PRINT WRITE exp:e SEMICOLON
                {:
                    RESULT = new PrintStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList:sl RCURLY
                {:
                    RESULT = new IfStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vl1 stmtList:sl1 RCURLY 
                ELSE LCURLY varDeclList:vl2 stmtList:sl2 RCURLY
                {:
                    RESULT = new IfElseStmtNode(e, new DeclListNode(vl1), new StmtListNode(sl1),
                    new DeclListNode(vl2), new StmtListNode(sl2));
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList:sl RCURLY
                {:
                    RESULT = new WhileStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList: sl RCURLY
                {:
                    RESULT = new RepeatStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | RETURN exp:e SEMICOLON
                {:
                    RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {:
                    RESULT = new ReturnStmtNode(null);
                :}
                | fncall:f SEMICOLON
                {:
                    RESULT = new CallStmtNode(f); 
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {:
                    RESULT = new AssignNode(l, e);
                :}
                ;

loc             ::= id:i
                {:
                    RESULT = i; 
                :}
                | loc:l DOT id:i
                {:
                    RESULT = new DotAccessNode(l, i);
                :}
                ;



				
